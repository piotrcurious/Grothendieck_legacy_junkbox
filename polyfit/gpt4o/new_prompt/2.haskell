{-# LANGUAGE OverloadedStrings #-}

module PolynomialSchemesDemo where

import PolynomialSchemes
import Data.Time.Clock
import Data.Time.Calendar
import qualified Data.Vector as V
import Control.Monad (forM)
import Data.Word
import Text.Printf
import Graphics.Rendering.Chart.Easy
import Graphics.Rendering.Chart.Backend.Cairo

-- | Generate synthetic time series data with known polynomial structure
generateTimeSeries :: UTCTime -> Int -> IO [TimePoint]
generateTimeSeries startTime n = do
    let seconds = [0..(n-1)]
    forM seconds $ \s -> do
        let time = addUTCTime (fromIntegral s) startTime
        -- Generate value using polynomial: 2x^2 - 3x + 1 with some noise
        let x = fromIntegral s / 100.0
        let baseValue = 2*x*x - 3*x + 1
        -- Add some noise that preserves scheme structure
        let value = FloatPoint baseValue
        return TimePoint { timestamp = time, value = value }

-- | Convert SchemePoint to Double for visualization
schemePointToDouble :: SchemePoint -> Double
schemePointToDouble (FloatPoint d) = d
schemePointToDouble (IntegerPoint w) = fromIntegral w

-- | Create a polynomial basis for feature extraction
exampleBasis :: PolyBasis
exampleBasis = PolyBasis {
    baseDegree = 2,  -- Up to quadratic terms
    timeShifts = [-2, -1, 0],  -- Use current and two previous values
    crossTerms = True
}

-- | Demonstrate the full pipeline
demonstratePipeline :: IO ()
demonstratePipeline = do
    -- Generate training data
    startTime <- getCurrentTime
    trainingData <- generateTimeSeries startTime 100
    
    -- Generate test data
    testData <- generateTimeSeries (addUTCTime 100 startTime) 20
    
    -- Create feature space
    let space = makeFeatureSpace exampleBasis floatScheme
    
    -- Extract features
    let trainingFeatures = extractFeatures space trainingData
    let trainingValues = V.fromList $ map (doubleToF2Poly . schemePointToDouble . value) trainingData
    
    -- Fit model
    let model = fitModel space trainingFeatures trainingValues
    
    -- Make predictions
    let testFeatures = extractFeatures space testData
    let predictions = V.map (pullback model) testFeatures
    
    -- Visualize results
    visualizeResults trainingData testData (V.toList predictions)

-- | Visualization function
visualizeResults :: [TimePoint] -> [TimePoint] -> [F2Poly] -> IO ()
visualizeResults training testing predictions = do
    let trainingPoints = map (\tp -> (timestamp tp, schemePointToDouble $ value tp)) training
    let testingPoints = map (\tp -> (timestamp tp, schemePointToDouble $ value tp)) testing
    let predictionPoints = zip (map timestamp testing) (map f2PolyToDouble predictions)
    
    toFile def "polynomial_fit.png" $ do
        layout_title .= "Polynomial Feature Fitting Results"
        layout_x_axis . laxis_title .= "Time"
        layout_y_axis . laxis_title .= "Value"
        
        plot (line "Training Data" [trainingPoints])
        plot (line "Test Data" [testingPoints])
        plot (line "Predictions" [predictionPoints])
  where
    f2PolyToDouble :: F2Poly -> Double
    f2PolyToDouble poly = undefined -- Convert F2Poly back to Double

-- | Helper function to print model diagnostics
printModelDiagnostics :: SchemeMorphism -> IO ()
printModelDiagnostics model = do
    putStrLn "Model Diagnostics:"
    putStrLn $ printf "Input dimension: %d" (fiberDimension $ domain model)
    putStrLn $ printf "Output dimension: %d" (fiberDimension $ codomain model)
    
    -- Print some example transformations
    let examplePoly = F2Poly {
        coefficients = V.replicate 64 Zero,
        degree = 63
    }
    putStrLn "Example transformation:"
    print $ pullback model examplePoly

-- | Main demo function
main :: IO ()
main = do
    putStrLn "Starting Polynomial Feature Framework Demo..."
    
    -- Run full pipeline
    demonstratePipeline
    
    -- Create a simple dataset for detailed analysis
    startTime <- getCurrentTime
    simpleData <- generateTimeSeries startTime 10
    
    putStrLn "\nExample Data Points:"
    forM_ (take 5 simpleData) $ \point -> do
        let val = schemePointToDouble $ value point
        putStrLn $ printf "Time: %s, Value: %.4f" (show $ timestamp point) val
    
    -- Create and analyze a simple model
    let space = makeFeatureSpace exampleBasis floatScheme
    let features = extractFeatures space simpleData
    
    putStrLn "\nFeature Space Analysis:"
    putStrLn $ printf "Number of features: %d" (V.length features)
    putStrLn $ printf "Base dimension: %d" (dimension $ baseScheme space)
    
    -- Show how Frobenius endomorphism affects features
    putStrLn "\nFrobenius Transformation Example:"
    let firstFeature = V.head features
    print $ frobenius firstFeature
    
    putStrLn "\nDemo completed successfully!"
