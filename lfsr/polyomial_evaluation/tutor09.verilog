module async_lfsr_fitting_memory #(
    parameter ADDR_WIDTH = 5,
    parameter DATA_WIDTH = 3,
    parameter MEM_DEPTH = 32,
    parameter MAX_LFSR_LENGTH = 8
) (
    input wire clk,
    input wire rst_n,
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] data_in,
    input wire write_en,
    output reg [DATA_WIDTH-1:0] data_out,
    input wire convert_strobe,
    output reg conversion_done,
    output reg [MAX_LFSR_LENGTH-1:0][DATA_WIDTH-1:0] lfsr_coeffs,
    output reg [3:0] lfsr_length
);

    // Memory array
    reg [DATA_WIDTH-1:0] memory [0:MEM_DEPTH-1];

    // Asynchronous computation signals
    reg computation_active;
    reg [ADDR_WIDTH-1:0] comp_addr;
    reg [DATA_WIDTH-1:0] comp_data;
    reg [MAX_LFSR_LENGTH-1:0][DATA_WIDTH-1:0] c, b;
    reg [3:0] l, m, b_len;
    reg [DATA_WIDTH-1:0] d;
    integer i, j;

    // GF(8) arithmetic functions
    function [DATA_WIDTH-1:0] gf8_add;
        input [DATA_WIDTH-1:0] a, b;
        begin
            gf8_add = a ^ b;
        end
    endfunction

    function [DATA_WIDTH-1:0] gf8_mul;
        input [DATA_WIDTH-1:0] a, b;
        reg [DATA_WIDTH-1:0] p;
        integer i;
        begin
            p = 0;
            for (i = 0; i < 3; i = i + 1) begin
                if (b[0]) p = p ^ a;
                if (a[2]) a = (a << 1) ^ 3'b011;
                else a = a << 1;
                b = b >> 1;
            end
            gf8_mul = p;
        end
    endfunction

    // Asynchronous Berlekamp-Massey algorithm
    always @(*) begin
        if (computation_active) begin
            if (comp_addr == 0) begin
                for (i = 0; i < MAX_LFSR_LENGTH; i = i + 1) begin
                    c[i] = (i == 0) ? 3'b001 : 3'b000;
                    b[i] = (i == 0) ? 3'b001 : 3'b000;
                end
                l = 0;
                m = 1;
                b_len = 1;
                d = comp_data;
            end else begin
                d = comp_data;
                for (j = 1; j <= l; j = j + 1) begin
                    d = gf8_add(d, gf8_mul(c[j], memory[comp_addr - j]));
                end

                if (d == 0) begin
                    m = m + 1;
                end else if (2 * l <= comp_addr) begin
                    for (i = 0; i < MAX_LFSR_LENGTH; i = i + 1) begin
                        reg [DATA_WIDTH-1:0] temp = c[i];
                        if (i + comp_addr - m < MAX_LFSR_LENGTH) begin
                            c[i + comp_addr - m] = gf8_add(c[i + comp_addr - m], gf8_mul(d, b[i]));
                        end
                        b[i] = temp;
                    end
                    l = comp_addr + 1 - l;
                    b_len = MAX_LFSR_LENGTH;
                    m = 1;
                end else begin
                    for (i = 0; i < b_len; i = i + 1) begin
                        if (i + comp_addr - m < MAX_LFSR_LENGTH) begin
                            c[i + comp_addr - m] = gf8_add(c[i + comp_addr - m], gf8_mul(d, b[i]));
                        end
                    end
                    m = m + 1;
                end
            end

            if (comp_addr == MEM_DEPTH - 1) begin
                for (i = 0; i <= l; i = i + 1) begin
                    lfsr_coeffs[i] = c[i];
                end
                lfsr_length = l + 1;
                conversion_done = 1;
                computation_active = 0;
            end else begin
                comp_addr = comp_addr + 1;
                comp_data = memory[comp_addr];
            end
        end
    end

    // Synchronous memory interface and control logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            computation_active <= 0;
            conversion_done <= 0;
            comp_addr <= 0;
            for (i = 0; i < MAX_LFSR_LENGTH; i = i + 1) begin
                lfsr_coeffs[i] <= 0;
            end
            lfsr_length <= 0;
        end else begin
            if (write_en) begin
                memory[addr] <= data_in;
            end
            data_out <= memory[addr];

            if (convert_strobe && !computation_active) begin
                computation_active <= 1;
                conversion_done <= 0;
                comp_addr <= 0;
                comp_data <= memory[0];
            end
        end
    end

endmodule
